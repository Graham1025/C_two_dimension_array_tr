1、一维数组传递：形参里面要么用指针形int *array，要么用int array[]，写入数组的长度一点用没有。

func(int *array,int length)
{
...
}
int main()
{
int array[5]={0};
func(array,5);
    }

    2、二维数组传递（重点）：分二级指针传递和数组名传递两种
  （1）当实参数组变量是二级指针变量时（通过两个malloc生成二维数组），
       形参数组变量也必须是二级指针（是**arr对，arr[][Size]就会报错），如下所示：
正确形式如下：
change(int** arr)
{
	arr[0][1] = 1;
}
int main()
{
	int** array;
	array = (int **)malloc(sizeof(int *) * 10); // 分配所有行的首地址
	for (int i = 0; i < 10; i++) { // 按行分配每一列
		array[i] = (int *)malloc(sizeof(int) * 10);
	}
	for (int i = 0; i < 10; i++)
		for (int j = 0; j < 10; j++)
			array[i][j] = 0;
	change(array);
	printf("%d", array[0][1]);


错误形式如下：这种情况下，array数组的值，并没有传递给arr。
change(int arr[][10])
{
	arr[0][1] = 1;
}
int main()
{
	int** array;
	array = (int **)malloc(sizeof(int *) * 10); // 分配所有行的首地址
	for (int i = 0; i < 10; i++) { // 按行分配每一列
		array[i] = (int *)malloc(sizeof(int) * 10);
	}
	for (int i = 0; i < 10; i++)
		for (int j = 0; j < 10; j++)
			array[i][j] = 0;
	change(array);
	printf("%d", array[0][1]);

    
    （2）当实参是二维数组名时，形参既可以是二级指针变量(**arr)，也可以是指定列长的数组名（int arr[][length])
以下两种形式都正确：
change(int** arr)
{
	arr[0][1] = 1;
	change2(brr);
}
int main()
{
	int array[10][10] = { 0 };
	change(array);
	printf("%d", array[0][1]);


change(int arr[][10])
{
	arr[0][1] = 1;
}
int main()
{
	int array[10][10] = { 0 };
	change(array);
	printf("%d", array[0][1]);

友情提示：同一级函数下，指针变量*（p+1）的形式都可以随意转化为p[1],同理*((int *)p+n*i+j)即表示p[i][j]，n表示列的大小。
